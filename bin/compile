#!/usr/bin/env bash

set -e            # fail fast
set -o pipefail   # don't ignore exit codes when piping output
# set -x          # enable debugging

# Configuration
build_dir=$1
cache_dir=$2
env_dir=$3
bp_dir=$(cd $(dirname $0); cd ..; pwd)

# Load some convenience functions like status(), echo(), and indent()
source $bp_dir/bin/common.sh

# Output npm debug info on error
# trap cat_npm_debug_log ERR

# Fetch the latest stable node version from semver.io
node_version=$(curl --silent --get https://semver.io/node/stable)

# Download node from Heroku's S3 mirror of nodejs.org/dist
status "Downloading and installing node $node_version"
node_url="http://s3pository.heroku.com/node/v$node_version/node-v$node_version-linux-x64.tar.gz"
curl $node_url -s -o - | tar xzf - -C $build_dir

# Move node (and npm) into ./vendor and make them executable
mkdir -p $build_dir/vendor
mv $build_dir/node-v$node_version-linux-x64 $build_dir/vendor/node
chmod +x $build_dir/vendor/node/bin/*
PATH=$PATH:$build_dir/vendor/node/bin

# Run subsequent node/npm commands from the build path
cd $build_dir

# If node_modules directory is checked into source control then
# rebuild any native deps. Otherwise, restore from the build cache.
if test -d $build_dir/node_modules; then
  status "Found existing node_modules directory; skipping cache"
  status "Rebuilding any native dependencies"
  npm rebuild 2>&1 | indent
elif test -d $cache_dir/node/node_modules; then
  status "Restoring node_modules directory from cache"
  cp -r $cache_dir/node/node_modules $build_dir/

  status "Pruning cached dependencies not specified in package.json"
  npm prune 2>&1 | indent

  if test -f $cache_dir/node/.heroku/node-version && [ $(cat $cache_dir/node/.heroku/node-version) != "$node_version" ]; then
    status "Node version changed since last build; rebuilding dependencies"
    npm rebuild 2>&1 | indent
  fi
fi

# Scope config var availability only to `npm install`
(
  status "Installing dependencies"
  # Make npm output to STDOUT instead of its default STDERR
  npm install --userconfig $build_dir/.npmrc --production 2>&1 | indent
)

# Persist goodies like node-version in the slug
mkdir -p $build_dir/.heroku

# Save resolved node version in the slug for later reference
echo $node_version > $build_dir/.heroku/node-version

# Purge node-related cached content, being careful not to purge the top-level
# cache, for the sake of heroku-buildpack-multi apps.
rm -rf $cache_dir/node_modules # (for apps still on the older caching strategy)
rm -rf $cache_dir/node
mkdir -p $cache_dir/node

# If app has a node_modules directory, cache it.
if test -d $build_dir/node_modules; then
  status "Caching node_modules directory for future builds"
  cp -r $build_dir/node_modules $cache_dir/node
fi

# Copy goodies to the cache
cp -r $build_dir/.heroku $cache_dir/node

# Create a node_modules directory if one doesn't already exist
mkdir -p $build_dir/node_modules

# Copy charge dependency to node_modules
cp -r $bp_dir/node_modules/charge $build_dir/node_modules/

# Create a Procfile
status "Creating a Charge server Procfile"
echo "web: ./node_modules/charge/bin/charge public --port \$PORT" > $build_dir/Procfile

# Compile project using Roots
status "Compiling Roots Project"
$build_dir/node_modules/roots/bin/roots compile

# Update the PATH
# status "Building runtime environment"
mkdir -p $build_dir/.profile.d
echo "export PATH=\"\$HOME/vendor/node/bin:\$HOME/bin:\$HOME/node_modules/.bin:\$PATH\";export NODE_ENV=${NODE_ENV:production}" > $build_dir/.profile.d/nodejs.sh
