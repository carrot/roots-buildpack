// Generated by CoffeeScript 1.7.0
(function() {
  var generate_command, generate_title, wordwrap;

  require('colors');

  module.exports = function(opts) {
    var cmd, color, commands, log, res, title, width, _i, _len;
    commands = opts.commands;
    title = opts.title;
    log = opts.options.log || false;
    width = opts.options.width || 75;
    color = opts.options.color || 'red';
    if (!commands) {
      throw '"commands" missing';
    }
    res = "";
    if (title) {
      res += generate_title(title, color);
    }
    for (_i = 0, _len = commands.length; _i < _len; _i++) {
      cmd = commands[_i];
      res += generate_command(cmd, color, width);
    }
    if (log) {
      console.log(res);
    }
    return res;
  };

  generate_title = function(text, color) {
    var i, res, _i, _ref;
    res = ("\n" + text + "\n")[color].bold;
    for (i = _i = 0, _ref = text.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      res += "-".bold;
    }
    res += "\n";
    return res;
  };

  generate_command = function(cmd, color, width) {
    var arg, res, _i, _j, _len, _len1, _ref, _ref1;
    if (cmd.required && typeof cmd.required === 'string') {
      cmd.required = [cmd.required];
    }
    if (cmd.optional && typeof cmd.optional === 'string') {
      cmd.optional = [cmd.optional];
    }
    res = "\n* "[color];
    res += "" + cmd.name.bold + " ";
    if (cmd.required) {
      _ref = cmd.required;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        arg = _ref[_i];
        res += ("" + arg.underline + " ").grey;
      }
    }
    if (cmd.optional) {
      _ref1 = cmd.optional;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        arg = _ref1[_j];
        res += ("[" + arg + "] ").grey;
      }
    }
    res += "\n";
    res += "" + (wordwrap(cmd.description, width, '\n'));
    return res += "\n";
  };

  wordwrap = function(str, width, brk, cut) {
    var regex;
    brk = brk || '\n';
    cut = cut || false;
    if (!str) {
      return str;
    }
    regex = '.{1,' + width + '}(\\s|$)' + (cut ? '|.{' + width + '}|.+$' : '|\\S+?(\\s|$)');
    return str.match(RegExp(regex, 'g')).join(brk);
  };

}).call(this);
