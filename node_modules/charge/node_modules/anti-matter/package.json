{
  "name": "anti-matter",
  "version": "0.0.1",
  "author": {
    "name": "Jeff Escalante",
    "email": "hello@jenius.me"
  },
  "description": "flexible command line documentation",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/jenius/antimatter.git"
  },
  "main": "index.js",
  "dependencies": {
    "coffee-script": "1.x.x",
    "colors": "0.6.x"
  },
  "devDependencies": {
    "mocha": "*",
    "should": "*"
  },
  "scripts": {
    "test": "mocha"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "readme": "Antimatter\n==========\n\nFlexible command line documentation generation\n\n### Why should you care?\n\nYou are writing a command line tool in node, and it needs help and usage commands. At the moment, the only simple option is to use the built-in doc generation abilities of a popular arg parser like [optimist](https://github.com/substack/node-optimist) or [commander](https://github.com/visionmedia/commander), but if you don't exclusively use flags for your command line tool, or you have more complex and/or nested command sets, this can end up being messy or impossible.\n\nAntimatter attempts to solve this problem as a tool specifically for documenting command line interfaces in as simple and east-to-read a manner as possible, regardless of how the interface works or how complicated it is.\n\n### Installation\n\n`npm install antimatter`\n\n### Usage\n\nAntimatter makes no assumptions about how you have set up your command line interface, it just provides functions that make generating the documentation easier. Let's take a look at a high level example before we dive into it.\n\n```js\nvar antimatter = require('antimatter');\n\nantimatter({\n  title: 'roots cli',\n  options: { log: true },\n  commands: [{\n    name: 'watch',\n    required: 'folder',\n    optional: ['--no-open', '--no-livereload']\n    description: 'watches your project for changes and reloads when detected'\n  }, {\n    name: 'compile',\n    optional: 'path',\n    description: 'compiles your project once to the provided <path> or the current directory'\n  }]\n});\n```\n\nAt the moment, antimatter only has one root function - it takes an optional title/header for the doc block, an optional object of options, and either an object or array of objects that represent documented commands. By default it will output a colored and formatted string, ready to print to the command line -- if you pass `{ log: true }` into the options as above, it will `console.log` it for you. Here's a screenshot of what the above would look like in your terminal.\n\n![antimatter docs](https://i.cloudup.com/Md0HeNOkQK.thumb.png)\n\n#### API Docs\n\nThe antimatter function takes an object with three potential properties, title (optional), options (optional), and commands.\n\n##### Title\n\nString, serves as the header on the set of documented commands. Optional.\n\n##### Options\n\n- **log** _(boolean)_: `console.log` the output\n- **width** _(integer)_: constrain all text to this number of columns\n- **color** _(string)_: main color for the docs. default is red, available values [here](https://github.com/marak/colors.js/#colors-and-styles)\n\n##### Commands\n\nEither an object or array of objects that detail the command or commands you are documenting. Each object can have a few keys:\n\n- **name** _(string)_: name of the command you are documenting\n- **required** _(string/array)_: optional, required params passed to the command\n- **optional** _(string/array)_: optional, optional commands passed to the command\n- **description** _(string)_: description of the command. wrap any param in angle brackets to highlight it.\n\n### License & Contributing\n\n- Details on the license [can be found here](LICENSE.md)\n- Details on running tests and contributing [can be found here](contributing.md)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/jenius/antimatter/issues"
  },
  "homepage": "https://github.com/jenius/antimatter",
  "_id": "anti-matter@0.0.1",
  "_from": "anti-matter@0.0.1"
}
