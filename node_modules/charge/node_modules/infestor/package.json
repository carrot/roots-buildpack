{
  "name": "infestor",
  "version": "0.2.0",
  "description": "infest content into requests - via connect middleware",
  "main": "index.js",
  "scripts": {
    "test": "mocha test"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:samccone/infestor.git"
  },
  "keywords": [
    "connect",
    "middleware"
  ],
  "author": {
    "name": "Sam Saccone"
  },
  "license": "BSD-2-Clause",
  "bugs": {
    "url": "https://github.com/samccone/infestor/issues"
  },
  "homepage": "https://github.com/samccone/infestor",
  "devDependencies": {
    "mocha": "~1.15.1",
    "connect": "~2.12.0",
    "should": "~2.1.1",
    "request": "~2.30.0",
    "coffee-script": "latest"
  },
  "dependencies": {},
  "readme": "Infestor\n---------\n[![npm](https://badge.fury.io/js/infestor.png)](http://badge.fury.io/js/infestor)\n[![Build Status](https://travis-ci.org/samccone/infestor.png)](https://travis-ci.org/samccone/infestor)\n\n\nInject content into your server responses\n\n\n### Why?\nThere are times when all you want to do is inject a JS file or custom markup into the req res cycle without forcing the content generator to include custom markup on their side.\n\nThis is where infestor comes in. Just specify the regex insertion point and content. Then you are good to go.\n\n\n### Installing\n`npm install infestor`\n\n### How to\n\n```coffeescript\n  app.use require('infestor')(\n    content: \"<h2> injected content! </h2>\"\n    injectAt: '/<\\/html>/'\n  ).use(...)\n```\n\nMake sure that you place the infestor middleware before you serve your content. Or else infestor will not work.\n",
  "readmeFilename": "readme.md",
  "_id": "infestor@0.2.0",
  "_from": "infestor@0.2.0"
}
