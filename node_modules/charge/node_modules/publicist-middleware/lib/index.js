// Generated by CoffeeScript 1.7.1
(function() {
  var basicAuth, format_auth_option, minimatch, _;

  basicAuth = require('basic-auth');

  minimatch = require('minimatch');

  _ = require('lodash');


  /**
   * Configures options and returns a middleware function.
   *
   * Options:
   * - auth: A basic auth user/pass in the format of 'user:password'.
   *
   * @param  {Object} opts - options object, described above
   * @return {Function} middleware function
   */

  module.exports = function(opts) {
    var match;
    if (typeof opts === 'string') {
      match = {
        '**': opts
      };
    } else if (typeof opts === 'object' && opts.hasOwnProperty('user')) {
      match = {
        '**': opts.user + ':' + opts.pass
      };
    } else {
      match = opts;
    }
    return function(req, res, next) {
      var auth_headers;
      if (!opts) {
        return next();
      }
      _.keys(match).some((function(_this) {
        return function(matcher) {
          return _this.match = minimatch(req.url, matcher) ? matcher : false;
        };
      })(this));
      if (!this.match) {
        return next();
      }
      auth_headers = JSON.stringify(basicAuth(req));
      if (auth_headers === format_auth_option(match[this.match])) {
        return next();
      } else {
        res.statusCode = 401;
        res.setHeader('WWW-Authenticate', 'Basic realm="Secure Area"');
        return res.end('Not Authorized');
      }
    };
  };


  /**
   * Formats auth credentials to follow the {name: 'user', pass: 'pass'}
   * format of node-basic-auth
   *
   * @private
   * @param  {String} auth - a username:password string
   * @return {String} a stringified JSON object with 'name' and 'pass' keys
   */

  format_auth_option = function(auth) {
    auth = auth.split(':');
    return JSON.stringify({
      name: auth[0],
      pass: auth[1]
    });
  };

}).call(this);
