{
  "name": "mix-into",
  "version": "0.1.3",
  "description": "Mix objects into other objects",
  "main": "index.js",
  "scripts": {
    "test": "node test/index.js | node_modules/.bin/tspec"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/scottcorgan/mix-into.git"
  },
  "keywords": [
    "mix",
    "into",
    "objects",
    "extend"
  ],
  "author": {
    "name": "Scott Corgan"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/scottcorgan/mix-into/issues"
  },
  "devDependencies": {
    "tape": "~2.3.2",
    "tap-spec": "~0.1.3"
  },
  "dependencies": {
    "clone": "~0.1.11"
  },
  "readme": "# mix-into\n\nMix objects into other objects.\n\nBy adopting the \"mix into\" methodology, your code avoids the mess of \"add this mixin; add this mixin; add this mixin\". Istead, you can dynamically nest and defer the the mixin process.\n\n## Install\n\n```\nnpm isntall mix-into --save\n```\n\n## Usage\n\n#### Basic\n\n```js\nvar mix = require('mix-into');\nvar baseMixin = {\n  baseValue: 'some value',\n  baseMethod: function () {\n    return baseValue;\n  }\n};\n\nvar obj = {};\n\nmix(baseMixin).into(obj);\n\nobj.baseMethod(); // OUTPUTS: 'some value'\n```\n\n#### Partial Applied Mixin\n\n```js\nvar mix = require('mix-into');\nvar baseMixin = mix({\n  baseValue: 'some value',\n  baseMethod: function () {\n    return baseValue;\n  }\n});\nvar obj = {};\n\nbaseMixin.mixInto(obj);\n\nobj.baseMethod() // OUTPUS: 'some value'\n```\n\n#### Nested Mixins\n\n```js\nvar mix = require('mix-into');\nvar baseMixin = mix({\n  baseValue: 'some value',\n  baseMethod: function () {\n    return baseValue;\n  }\n});\n\nvar obj = {\n  objMethod: function () {\n    return this.baseValue;\n  }\n};\nvar obj2 = {};\n\nbaseMixin.mixInto(obj);\nobj.mixInto(obj2); // mixInto method added to each object that's mixed into\n\nobj2.objMethod() // OUTPUS: 'some value'\n```\n\n#### Create New Object from Mixin\n\n```js\nvar mix = require('mix-into');\nvar baseMixin = mix({\n  value1: 'value1'\n});\n\nvar obj = baseMixin.create();\n\nconsole.log(obj.value1); // OUTPUTS: 'value1'\n```\n\n## Run Tests\n\n```\nnpm install\nnpm test\n```",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/scottcorgan/mix-into",
  "_id": "mix-into@0.1.3",
  "_from": "mix-into@~0.1.1"
}
