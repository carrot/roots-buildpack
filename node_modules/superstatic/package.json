{
  "name": "superstatic",
  "version": "0.7.3",
  "description": "Superstatic: a static file server for fancy apps",
  "main": "lib/superstatic.js",
  "scripts": {
    "test": "npm run lint && node_modules/.bin/mocha --recursive --reporter spec ./test",
    "lint": "jshint ./lib"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/divshot/superstatic.git"
  },
  "keywords": [
    "static",
    "server",
    "divshot",
    "hosting"
  ],
  "author": {
    "name": "Divshot"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/divshot/superstatic/issues"
  },
  "dependencies": {
    "mime": "1.2.x",
    "minimatch": "0.2.x",
    "connect": "2.9.x",
    "async": "0.4.x",
    "lodash": "2.4.x",
    "chokidar": "~0.7.1",
    "jsun": "0.1.x",
    "deliver": "0.1.9",
    "slasher": "0.1.x",
    "globject": "0.1.x",
    "is-url": "~1.0.0",
    "mix-into": "~0.1.1",
    "minimist": "0.0.8"
  },
  "preferGlobal": "true",
  "bin": {
    "superstatic": "bin/superstatic.js"
  },
  "devDependencies": {
    "mocha": "~1.13.0",
    "expect.js": "~0.2.0",
    "sinon": "~1.7.3",
    "through": "~2.3.4",
    "mocksy": "~0.1.4",
    "knox": "~0.8.6",
    "supertest": "~0.9.0",
    "connect": "~2.9.2",
    "mkdirp": "0.3.x",
    "rmdir": "1.0.x",
    "clone": "0.1.x",
    "jshint": "2.4.x",
    "pre-commit": "0.0.4"
  },
  "jshintConfig": {
    "expr": true,
    "curly": false,
    "eqeqeq": true,
    "immed": true,
    "latedef": false,
    "newcap": true,
    "noarg": true,
    "sub": true,
    "undef": true,
    "unused": false,
    "boss": true,
    "eqnull": true,
    "node": true,
    "laxbreak": true,
    "globals": {
      "require": true,
      "module": true,
      "exports": true,
      "it": true,
      "describe": true,
      "beforeEach": true,
      "afterEach": true,
      "chai": true,
      "Regex": true
    }
  },
  "readme": "# Superstatic\n\nSuperstatic is an enhanced static web server that was built to power\n[Divshot.io](http://www.divshot.io). It has fantastic support for HTML5\npushState applications as well as clean URLs and other goodies.\n\n[![Build Status](https://travis-ci.org/divshot/superstatic.png?branch=master)](https://travis-ci.org/divshot/superstatic)\n\n## Installation\n\nSuperstatic should be installed globally using npm:\n\n    npm install -g superstatic\n\n## Usage\n\nBy default, Superstatic will simply serve the current directory on port\n3474. This works just like any other static server:\n\n    superstatic\n\nYou can optionally specify the directory, port and hostname of the server:\n\n    superstatic public --port 8080 --host 127.0.0.1\n\nWhere it gets interesting is with Superstatic's JSON configuration file.\n\n## Configuration\n\nSuperstatic reads special configuration from a JSON file (either `superstatic.json`\nor `divshot.json` by default, configurable with `-c`). This JSON file enables\nenhanced static server functionality beyond simply serving files.\n\n**root:** by default, Superstatic will serve the current working directory (or the\nancestor of the current directory that contains the configuration json being used).\nThis configuration key specifies a directory *relative to the configuration file* that\nshould be served. For example, if serving a Jekyll app, this might be set to `\"_site\"`.\nA directory passed as an argument into the command line app supercedes this configuration\ndirective.\n\n**clean_urls:** if `true`, all `.html` files will automatically have their extensions\ndropped. If `.html` is used at the end of a filename, it will perform a 301 redirect\nto the same path with `.html` dropped.\n\n**routes:** you can specify custom route recognition for your application by supplying\nan object to the routes key. Use a single star `*` to replace one URL segment or a\ndouble star to replace an arbitrary piece of URLs. This works great for single page\napps. An example:\n\n```json\n{\n  \"routes\": {\n    \"app/**\":\"application.html\",\n    \"projects/*/edit\":\"projects.html\"\n  }\n}\n```\n\n**error_page:** the path to the page that you want to render 404 errors if an unrecognized\nURL is supplied. For example, `error.html`.\n\n**cache_control:** by default, all pages served by superstatic have cache control headers set at\n1 hour. To change them, you can supply an object containing file globs and ages (in seconds).\nYou can also specify `false` to indicate that no caching should be performed, and a string to\nmanually set the cache control header. An example:\n\n```json\n{\n  \"cache_control\": {\n    \"nocache/**\": false,\n    \"**/*.html\": 600,\n    \"private/**\": \"private, max-age=1200\"\n  }\n}\n```\n\nNote that you can pass the `--no-cache` option when you run the server to serve all content\nwithout caching. This is good to use during development when you want fresh content served\non each request.\n\n**auth:** a user name and password which allows you to activate Basic Auth. For example, `username:password`.\n\n\n## Run Tests\n\nIn superstatic module directory:\n\n```\nnpm install\nnpm test\n```\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/divshot/superstatic",
  "_id": "superstatic@0.7.3",
  "dist": {
    "shasum": "98a362964debf74e490772e5eac1f36aa3d0e1b7"
  },
  "_from": "/Users/kylemac/Sites/carrot/superstatic"
}
